<!DOCTYPE html>
<html lang="en">
<head>
    <!-- ... (head content remains the same) ... -->
    <style>
        /* ... (styles remain the same) ... */

        /* Add a style for upload previews */
        .upload-preview {
            max-width: 200px;
            max-height: 150px;
            margin-top: 10px;
            display: none;
        }
    </style>
</head>
<body>
    <!-- ... (body content remains the same, except for minor additions below) ... -->

    <!-- Inside the Slide Management section, add a preview image -->
    <div class="section" id="slides" style="display: none;">
        <div class="card">
            <div class="card-header">
                <h2>Slide Management</h2>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label for="slideImage">Upload Slide Image</label>
                    <input type="file" id="slideImage" class="form-control" accept="image/*">
                    <img id="slidePreview" class="upload-preview" alt="Slide Preview">
                </div>
                <button class="btn btn-submit" id="uploadSlideBtn">
                    <i class="fas fa-upload"></i> Upload Slide
                </button>
                <!-- ... (rest of slide management remains the same) ... -->
            </div>
        </div>
    </div>

    <!-- Inside the Menu Management section, add a preview image -->
    <div class="section" id="menu" style="display: none;">
        <div class="card">
            <div class="card-header">
                <h2>Menu Management</h2>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label for="itemName">Item Name</label>
                    <input type="text" id="itemName" class="form-control" placeholder="Enter item name">
                </div>
                <div class="form-group">
                    <label for="itemPrice">Price</label>
                    <input type="number" id="itemPrice" class="form-control" placeholder="Enter price">
                </div>
                <div class="form-group">
                    <label for="itemImage">Item Image</label>
                    <input type="file" id="itemImage" class="form-control" accept="image/*">
                    <img id="itemPreview" class="upload-preview" alt="Item Preview">
                </div>
                <button class="btn btn-submit" id="addItemBtn">
                    <i class="fas fa-plus"></i> Add Item
                </button>
                <!-- ... (rest of menu management remains the same) ... -->
            </div>
        </div>
    </div>

    <!-- ... (rest of body content remains the same) ... -->

    <script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-app.js";
        import { getAnalytics } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-analytics.js";
        import { getDatabase, ref, onValue, set, push, remove, update } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-database.js";
        // Import Firebase Storage
        import { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-storage.js";

        // Your web app's Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyCiG3Tal0dCpBAV1SLS2Rbs6GYOA4zomQE",
            authDomain: "mirdhuna-4f652.firebaseapp.com",
            databaseURL: "https://mirdhuna-4f652-default-rtdb.firebaseio.com",
            projectId: "mirdhuna-4f652",
            storageBucket: "mirdhuna-4f652.firebasestorage.app", // This is important
            messagingSenderId: "184403369330",
            appId: "1:184403369330:web:859bcf3162bc2d2ed7d1eb",
            measurementId: "G-ZFWSGKE744"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const analytics = getAnalytics(app);
        const database = getDatabase(app);
        // Initialize Firebase Storage
        const storage = getStorage(app);

        // Authentication and Navigation code remains the same...
        // ... (authentication and navigation code) ...

        // Add preview functionality for images
        document.getElementById('slideImage').addEventListener('change', function(event) {
            const file = event.target.files[0];
            const preview = document.getElementById('slidePreview');
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                preview.style.display = 'none';
            }
        });

        document.getElementById('itemImage').addEventListener('change', function(event) {
            const file = event.target.files[0];
            const preview = document.getElementById('itemPreview');
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                preview.style.display = 'none';
            }
        });

        // Modify Slide Upload Functionality
        function loadSlidesData() {
            const slidesRef = ref(database, 'slides');
            onValue(slidesRef, (snapshot) => {
                const slides = snapshot.val();
                const slidesTable = document.getElementById('slidesTable');
                slidesTable.innerHTML = '';

                if (slides) {
                    Object.entries(slides).forEach(([id, slide]) => {
                        const row = document.createElement('tr');
                        // Use the stored URL from Storage
                        row.innerHTML = `
                            <td><img src="${slide.url}" alt="Slide" style="width: 100px; height: 60px; object-fit: cover;" onerror="this.onerror=null; this.src='https://via.placeholder.com/100x60?text=Image+Not+Found';"></td>
                            <td>${new Date(slide.timestamp).toLocaleDateString()}</td>
                            <td>
                                <button class="btn btn-delete" onclick="deleteSlide('${id}')">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </td>
                        `;
                        slidesTable.appendChild(row);
                    });
                }
            });

            // Upload slide to Firebase Storage
            document.getElementById('uploadSlideBtn').addEventListener('click', async function() {
                const fileInput = document.getElementById('slideImage');
                const file = fileInput.files[0];

                if (!file) {
                    alert('Please select an image file.');
                    return;
                }

                try {
                    // Create a reference to the file location in Storage
                    const fileName = `${Date.now()}_${file.name}`;
                    const storageReference = storageRef(storage, `slides/${fileName}`);

                    // Upload the file
                    const snapshot = await uploadBytes(storageReference, file);
                    console.log('Slide uploaded to Storage:', snapshot);

                    // Get the public download URL
                    const downloadURL = await getDownloadURL(snapshot.ref);
                    console.log('File available at:', downloadURL);

                    // Save the URL and metadata to the Realtime Database
                    const newSlideRef = push(ref(database, 'slides'));
                    await set(newSlideRef, {
                        url: downloadURL, // Store the permanent URL
                        name: file.name,
                        timestamp: new Date().toISOString()
                    });

                    // Reset form
                    fileInput.value = '';
                    document.getElementById('slidePreview').style.display = 'none';
                    alert('Slide uploaded successfully!');

                } catch (error) {
                    console.error('Error uploading slide:', error);
                    alert('Error uploading slide: ' + error.message);
                }
            });
        }

        // Modify Menu Item Upload Functionality
        function loadMenuData() {
            const menuRef = ref(database, 'menu');
            onValue(menuRef, (snapshot) => {
                const menu = snapshot.val();
                const menuTable = document.getElementById('menuTable');
                menuTable.innerHTML = '';

                if (menu) {
                    Object.entries(menu).forEach(([id, item]) => {
                        const row = document.createElement('tr');
                        // Use the stored URL from Storage
                        row.innerHTML = `
                            <td><img src="${item.image || 'https://via.placeholder.com/60?text=No+Image'}" alt="${item.name}" style="width: 60px; height: 60px; object-fit: cover;" onerror="this.onerror=null; this.src='https://via.placeholder.com/60?text=Image+Not+Found';"></td>
                            <td>${item.name}</td>
                            <td>â‚¹${item.price}</td>
                            <td>
                                <button class="btn btn-edit" onclick="editMenuItem('${id}')">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-delete" onclick="deleteMenuItem('${id}')">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </td>
                        `;
                        menuTable.appendChild(row);
                    });
                }
            });

            // Add menu item with image upload to Firebase Storage
            document.getElementById('addItemBtn').addEventListener('click', async function() {
                const name = document.getElementById('itemName').value.trim();
                const price = document.getElementById('itemPrice').value.trim();
                const fileInput = document.getElementById('itemImage');
                const file = fileInput.files[0];

                if (!name || !price) {
                    alert('Please enter item name and price.');
                    return;
                }

                if (!file) {
                    alert('Please select an image file.');
                    return;
                }

                try {
                    // Create a reference to the file location in Storage
                    const fileName = `${Date.now()}_${file.name}`;
                    const storageReference = storageRef(storage, `menu_items/${fileName}`);

                    // Upload the file
                    const snapshot = await uploadBytes(storageReference, file);
                    console.log('Menu item image uploaded to Storage:', snapshot);

                    // Get the public download URL
                    const downloadURL = await getDownloadURL(snapshot.ref);
                    console.log('File available at:', downloadURL);

                    // Save the item data (including the image URL) to the Realtime Database
                    const newItemRef = push(ref(database, 'menu'));
                    await set(newItemRef, {
                        name: name,
                        price: parseFloat(price),
                        image: downloadURL, // Store the permanent URL
                        timestamp: new Date().toISOString()
                    });

                    // Reset form
                    document.getElementById('itemName').value = '';
                    document.getElementById('itemPrice').value = '';
                    fileInput.value = '';
                    document.getElementById('itemPreview').style.display = 'none';
                    alert('Menu item added successfully!');

                } catch (error) {
                    console.error('Error adding menu item:', error);
                    alert('Error adding menu item: ' + error.message);
                }
            });
        }

        // ... (rest of the functions like loadDashboardData, loadOrdersData, etc. remain mostly the same) ...
        // Ensure loadDataForSection calls the updated loadSlidesData and loadMenuData
        function loadDataForSection(section) {
            switch(section) {
                case 'dashboard':
                    loadDashboardData();
                    break;
                case 'orders':
                    loadOrdersData();
                    break;
                case 'users':
                    loadUserLoginData();
                    break;
                case 'slides':
                    loadSlidesData(); // Calls the updated function
                    break;
                case 'menu':
                    loadMenuData(); // Calls the updated function
                    break;
                case 'analytics':
                    loadAnalyticsData();
                    break;
            }
        }

        // ... (Global functions like printOrder, deleteOrder, deleteSlide, deleteMenuItem remain the same or can be slightly adjusted if needed) ...
        // Ensure deleteSlide and deleteMenuItem also remove the image from Storage if needed (optional but good practice)
        // For simplicity, we'll just remove the database entry. Removing from Storage requires storing the Storage path.

        // Initial load
        loadDashboardData();
    </script>
</body>
</html>
